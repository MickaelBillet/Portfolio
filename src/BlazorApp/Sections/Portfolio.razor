@inject IStringLocalizer<Resources.Resource> Localizer
@inject LocalizationService LocalizationService

<section class="light" id="portfolio">
    <h2 style="text-align:center">@Localizer["Interests"]</h2>
    <div class="portfolio-container">
    @if (projects is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="portfolio-hero">
            @if (hero is not null)
            {
                <img src="@(hero.Src)" style="height: 90%; width: 100%; object-fit: cover;" 
                    alt="@(hero.Alt)" />
            }
        </div>

        <div class="container">
                @foreach (var project in projects)
                {
                    <div class="box" key="@project.title" style="min-width:auto; margin: 0px 10px 10px 10px">
                        <div key="@project.title" style="margin: 20px">
                            <a href="@project.Url" target="_blank" rel="noopener noreferrer">
                                <h3 style="flex-basis: 40px;">@project.title</h3>
                            </a>
                        </div>
                        @foreach(var description in project.descriptions)
                        {
                            <p class="small" style="text-align:justify">@description</p>
                        }
                    </div>
                }
        </div>
    }
    </div>
</section>

@code {
    [Parameter, EditorRequired]
    public required HttpClient Http { get; set; }

    [Parameter, EditorRequired]
    public required HeroImageService HeroImageService { get; set; }

    private List<Project>? projects;
    private HeroImage? hero;

    protected override async Task OnInitializedAsync()
    {
        if (await this.LocalizationService.GetLanguage() == Language.EnglishCode)
        {
            projects = await Http.GetFromJsonAsync<List<Project>>("Data/projects.json");
        }
        else
        {
            projects = await Http.GetFromJsonAsync<List<Project>>("Data/projects_fr.json");
        }

        hero = await HeroImageService.GetHeroAsync(img => img.Name is "portfolio");
    }
}
