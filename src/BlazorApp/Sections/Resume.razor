@inject IStringLocalizer<Resources.Resource> Localizer
@inject LocalizationService LocalizationService
@inject BrowserResizeService BrowserResizeService
@implements IAsyncDisposable

<section class="light" id="resume">
    @if (Background is not null)
    {
        <img class="background" src="@(Background.Src)" alt="@(Background.Alt)" />
    }
    <!-- Section Title -->
    <h2>@Localizer["Resume"]</h2>

    <div style="background-color: white; width: @Width; margin: 3em auto; text-align: center;">
        <div>
            @if (Content is null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <section>
                    <div class="flex-container">
                        <div class="flex-item-left" style="margin: 2em 1em">                            
                            <ContactComponent resume="@Content"></ContactComponent>
                            <hr style="margin:20px 20px 20px 20px" />
                            <EducationComponent educations="@Content.education"></EducationComponent>
                            <hr style="margin:20px 20px 20px 20px"/>
                            <ExperienceComponent resume="@Content" startindex="0" count="2"></ExperienceComponent>
                        </div>

                        <div class="flex-item-right" style="margin: 2em 1em">
                            <ExperienceComponent resume="@Content" startindex="2" count="6"></ExperienceComponent>
                        </div>
                    </div>
                </section>
            }
        </div>
    </div>
</section>

@code {
    [Parameter, EditorRequired]
    public required HttpClient Http { get; set; }

    [Parameter, EditorRequired]
    public required HeroImageService HeroImageService { get; set; }

    private BlazorApp.Models.Resume? Content;
    private HeroImage? Background;
    private string Width = "70%";

    protected override async Task OnInitializedAsync()
    {
        if (await this.LocalizationService.GetLanguage() == Language.EnglishCode)
        {
            this.Content = await Http.GetFromJsonAsync<BlazorApp.Models.Resume>("Data/resume.json");
        }
        else
        {
            this.Content = await Http.GetFromJsonAsync<BlazorApp.Models.Resume>("Data/resume_fr.json");
        }

        this.Background = await HeroImageService.GetHeroAsync(img => img.Name is "about");
        await CheckWindowSize();

        await this.BrowserResizeService.RegisterResizeCallback<Resume>(DotNetObjectReference.Create(this));
    }

    private async Task CheckWindowSize()
    {
        this.SetWidth(await this.BrowserResizeService.GetWindowWidthAsync());
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnResize(int width, int height)
    {
        this.SetWidth(width);
        StateHasChanged();
    }

    private void SetWidth(int width)
    {
        if (width < 768)
        {
            this.Width = "100%";
        }
        else
        {
            this.Width = "70%";
        }
    }

    public async ValueTask DisposeAsync()
    {
        await this.BrowserResizeService.DisposeAsync();
    }
}
